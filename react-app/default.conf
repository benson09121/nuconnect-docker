server {
	listen 80 default_server;
    listen [::]:80 default_server;
	server_name localhost;

    add_header X-Frame-Options "DENY" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header Referrer-Policy "strict-origin-when-cross-origin" always;
	add_header Permissions-Policy "geolocation=(), camera=(), microphone=()" always;
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    client_max_body_size 50M;
		
	server_tokens off;
	add_header X-Download-Options "noopen" always;


	root /usr/share/nginx/html;

	index index.html index.htm index.nginx-debian.html;
	
    location ^~ //.well-known/ {
        allow all;  # Override any default deny rules
        default_type application/json;
        try_files $uri =404;

        # Inherit security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
    }

	location / {

		try_files $uri $uri/ /index.html =404;
        
	}

	location /api/ {
        proxy_pass http://node-app:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    


    location /api/web/get-requirements/ {
        proxy_pass http://node-app:3000/api/web/requirements/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }


    location /protected-certificates/ {
    internal;
    alias /usr/share/nginx/html/certificates/;

        add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; 
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    location /protected-requirements/ {
        internal;
        alias /usr/share/nginx/html/requirements/;

        # Add CORS headers here
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

        location /protected-organization-requirements/ {
        internal;
        alias /usr/share/nginx/html/organizations/;

        # Allow all file types (including images)
        types {
            image/png  png;
            image/jpeg jpg jpeg;
            image/gif  gif;
            image/svg+xml svg;
            image/webp webp;
            application/pdf pdf;
            application/octet-stream bin;
            # Add more as needed
        }

        # Add CORS headers here
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;

        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    	
    location ~* (\.env|\.git|\.htaccess) {
        deny all;
        return 404;
    }

	    location ~* \.(js|css|jpg|jpeg|gif|ico|svg|woff2?)$ {
        expires 5d;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

	location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

}

