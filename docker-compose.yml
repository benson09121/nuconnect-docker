services:

  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    container_name: mysql
    image: mysql:8.4
    command:
      - --init-file=/docker-entrypoint-initdb.d/init.sql
    volumes:
      - mysql_volume:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql 
    ports:
      - "3307:3306"
    networks:
      - my-network
    restart: unless-stopped

  # clamav:
  #   image: clamav/clamav:1.0
  #   container_name: clamav
  #   ports:
  #     - "3310:3310"
  #   volumes:
  #     - clamav_data:/var/lib/clamav
  #   networks:
  #     - my-network
  #   command: ["clamd", "--foreground"]
  #   restart: unless-stopped

  node-app:
    container_name: node-app
    build: ./node-app
    volumes:
      - /opt/certificates/templates:/app/certificates/templates
      - /opt/certificates/generated:/app/certificates/generated
    networks:
      - my-network
    ports:
      - "3001:3000"
    restart: unless-stopped
    depends_on:
      - mysql

  nginx:
    container_name: nginx
    build: ./react-app  
    volumes:
      - /opt/certificates/generated:/usr/share/nginx/html/certificates/generated
      - /opt/certificates/templates:/usr/share/nginx/html/certificates/templates
    ports:
      - "8080:80"
    networks:
      - my-network
    depends_on:
      - node-app
    restart: unless-stopped

  redis:
    image: redis:8.0-M01
    container_name: redis
    command: redis-server --requirepass redis_password_nuconnect
    ports:
      - "6380:6379"
    volumes:
      - redis_volume:/data
    networks:
      - my-network
    restart: unless-stopped
  
  # flask_app:
  #   container_name: flask
  #   build: ./converter
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - FLASK_ENV=production
  #   networks:
  #     - my-network

networks:
  my-network:
      name: networks
      driver: bridge

volumes:
  mysql_volume:
  redis_volume:
  # clamav_data:
